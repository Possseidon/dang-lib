# Taken and modified from here:
# https://github.com/lukka/CppBuildTasks-Validation/blob/master/.github/workflows/hosted-pure-workflow.yml

name: Run build and tests

on:
  push:
    branches:
      - master
    paths-ignore: &paths
      - .*
      - naming-conventions.md
      - README.md
      - run-clang-format.bat
      - run-cmake-format.bat
      - run-cmake-lint.bat
      - VSWorkspaceSettings.json
      - "**.natvis"
  pull_request:
    branches:
      - master
    paths-ignore: *paths

jobs:
  job:
    name: ${{matrix.runs.name}}
    runs-on: ${{matrix.runs.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu - GCC
            os: ubuntu-latest
            preset: linux-gcc-x64
          - name: Ubuntu - Clang
            os: ubuntu-latest
            preset: linux-clang-x64
          - name: Windows - MSVC
            os: windows-latest
            preset: windows-msvc-x64
          - name: Windows - Clang
            os: windows-latest
            preset: windows-clang-x64

    env:
      CMAKE_BUILD_DIR: ${{github.workspace}}/build
      VCPKG_ROOT: ${{github.workspace}}/vcpkg
      VCPKG_BINARY_SOURCES: clear;files,${{github.workspace}}/.vcpkg-archives,readwrite

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Restore vcpkg and its artifacts
        uses: actions/cache@v2
        env:
          vcpkg-cache-base: vcpkg-${{secrets.VCPKG_CACHE_ID}}-${{hashFiles('.git/modules/vcpkg/HEAD')}}-${{matrix.runs.preset}}
        with:
          path: |
            ${{github.workspace}}/.vcpkg-archives
            ${{env.VCPKG_ROOT}}/downloads
          key: ${{env.vcpkg-cache-base}}-${{hashFiles('vcpkg.json')}}
          restore-keys: |
            ${{env.vcpkg-cache-base}}-

      - name: (Linux) Install required tools for glfw
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev

      - name: (Windows) Ensure the Developer Command Prompt is setup correctly
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies and generate project files
        run: cmake --preset=${{matrix.runs.preset}} -B "${{env.CMAKE_BUILD_DIR}}" -DDANG_WERROR:BOOL=ON

      - name: Build all
        run: cmake --build "${{env.CMAKE_BUILD_DIR}}"

      - name: Build dmath
        run: cmake --build "${{env.CMAKE_BUILD_DIR}}" --target dmath

      - name: Run tests
        run: |
          cd "${{env.CMAKE_BUILD_DIR}}"
          ctest --parallel 2 --label-exclude "^opengl$"
