# Taken and modified from here:
# https://github.com/lukka/CppBuildTasks-Validation/blob/master/.github/workflows/hosted-pure-workflow.yml

name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CMAKE_BUILD_DIR: ${{github.workspace}}/build

jobs:
  check-for-changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      build-files-changed: ${{steps.build-files.outputs.any_modified}}

    steps:
      - name: Checkout entire repository
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout repository
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3

      - name: Check for changes of build related files
        id: build-files
        uses: tj-actions/changed-files@v22.2
        with:
          files_ignore: |
            .clang-format
            .cmake-format.py
            .editorconfig
            .gitattributes
            .gitignore
            .gitmodules
            .pre-commit-config.yaml
            naming-conventions.md
            README.md
            run-clang-format.bat
            run-cmake-format.bat
            run-cmake-lint.bat
            VSWorkspaceSettings.json
            **.natvis

      - name: Build related files that changed
        run: |
          for file in ${{steps.build-files.outputs.all_changed_and_modified_files}}; do
            echo "$file"
          done

  skip-build-and-tests:
    needs: check-for-changes
    if: needs.check-for-changes.outputs.build-files-changed != 'true'
    name: "[${{matrix.os-compiler}}] ${{matrix.step}}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os-compiler:
          - Ubuntu - GCC
          - Ubuntu - Clang
          - Windows - MSVC
          - Windows - Clang
        step:
          - Build all
          - Build dmath
          - Run tests

    steps:
      - name: Skip build and tests
        run: ""

  configure-build:
    needs: check-for-changes
    if: needs.check-for-changes.outputs.build-files-changed == 'true'
    name: "[${{matrix.os-compiler}}] Configure build"
    runs-on: ${{matrix.runs-on}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os-compiler: Ubuntu - GCC
            runs-on: ubuntu-latest
            preset: linux-gcc-x64
          - os-compiler: Ubuntu - Clang
            runs-on: ubuntu-latest
            preset: linux-clang-x64
          - os-compiler: Windows - MSVC
            runs-on: windows-latest
            preset: windows-msvc-x64
          - os-compiler: Windows - Clang
            runs-on: windows-latest
            preset: windows-clang-x64

    env:
      VCPKG_ROOT: ${{github.workspace}}/vcpkg
      VCPKG_BINARY_SOURCES: clear;files,${{github.workspace}}/.vcpkg-archives,readwrite

    steps:
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: (Linux) Install required tools for glfw
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev

      - name: (Windows) Ensure the Developer Command Prompt is setup correctly
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Restore vcpkg and its artifacts
        uses: actions/cache@v2
        env:
          vcpkg-cache-base: vcpkg-${{secrets.VCPKG_CACHE_ID}}-${{hashFiles('.git/modules/vcpkg/HEAD')}}-${{matrix.preset}}
        with:
          path: |
            ${{github.workspace}}/.vcpkg-archives
            ${{env.VCPKG_ROOT}}/downloads
          key: ${{env.vcpkg-cache-base}}-${{hashFiles('vcpkg.json')}}
          restore-keys: |
            ${{env.vcpkg-cache-base}}-

      - name: Download environment
        uses: actions/download-artifact@v3
        with:
          name: environment-${{matrix.runs-on}}

      - name: Install dependencies and generate project files
        run: cmake --preset=${{matrix.preset}} -B "${{env.CMAKE_BUILD_DIR}}" -DDANG_WERROR:BOOL=ON

      - name: Upload configured build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: configured-${{matrix.preset}}
          path: "${{env.CMAKE_BUILD_DIR}}"

  build-all:
    needs: configure-build
    name: "[${{matrix.os-compiler}}] Build all"
    runs-on: ${{matrix.runs-on}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os-compiler: Ubuntu - GCC
            runs-on: ubuntu-latest
            preset: linux-gcc-x64
          - os-compiler: Ubuntu - Clang
            runs-on: ubuntu-latest
            preset: linux-clang-x64
          - os-compiler: Windows - MSVC
            runs-on: windows-latest
            preset: windows-msvc-x64
          - os-compiler: Windows - Clang
            runs-on: windows-latest
            preset: windows-clang-x64

    steps:
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: (Linux) Install required tools for glfw
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev

      - name: (Windows) Ensure the Developer Command Prompt is setup correctly
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Download configured build artifacts
        uses: actions/download-artifact@v3
        with:
          name: configured-${{matrix.preset}}
          path: "${{env.CMAKE_BUILD_DIR}}"

      - name: Build all
        run: cmake --build "${{env.CMAKE_BUILD_DIR}}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-all-${{matrix.preset}}
          path: "${{env.CMAKE_BUILD_DIR}}"
          retention-days: 1

  build-dmath:
    needs: configure-build
    name: "[${{matrix.os-compiler}}] Build dmath"
    runs-on: ${{matrix.runs-on}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os-compiler: Ubuntu - GCC
            runs-on: ubuntu-latest
            preset: linux-gcc-x64
          - os-compiler: Ubuntu - Clang
            runs-on: ubuntu-latest
            preset: linux-clang-x64
          - os-compiler: Windows - MSVC
            runs-on: windows-latest
            preset: windows-msvc-x64
          - os-compiler: Windows - Clang
            runs-on: windows-latest
            preset: windows-clang-x64

    steps:
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: (Linux) Install required tools for glfw
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev

      - name: (Windows) Ensure the Developer Command Prompt is setup correctly
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Download configured build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-${{matrix.preset}}
          path: "${{env.CMAKE_BUILD_DIR}}"

      - name: Build dmath
        run: cmake --build "${{env.CMAKE_BUILD_DIR}}" --target dmath

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-dmath-${{matrix.preset}}
          path: "${{env.CMAKE_BUILD_DIR}}"
          retention-days: 1

  run-tests:
    needs: build-all # dmath doesn't have tests yet
    name: "[${{matrix.os-compiler}}] Run tests"
    runs-on: ${{matrix.runs-on}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os-compiler: Ubuntu - GCC
            runs-on: ubuntu-latest
            preset: linux-gcc-x64
          - os-compiler: Ubuntu - Clang
            runs-on: ubuntu-latest
            preset: linux-clang-x64
          - os-compiler: Windows - MSVC
            runs-on: windows-latest
            preset: windows-msvc-x64
          - os-compiler: Windows - Clang
            runs-on: windows-latest
            preset: windows-clang-x64

    steps:
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: (Linux) Install required tools for glfw
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev

      - name: (Windows) Ensure the Developer Command Prompt is setup correctly
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-all-${{matrix.preset}}

      - name: Run tests
        run: |
          cd "${{env.CMAKE_BUILD_DIR}}"
          ctest --parallel 2 --label-exclude "^opengl$"

      # TODO: Upload test results
